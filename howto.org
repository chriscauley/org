* pypi publish
http://peterdowns.com/posts/first-time-with-pypi.html
** create setup.py and setup.cfg
** create a github release and copy url into setup.py
** send to pypitest and pypi
   python setup.py register -r pypitest
   python setup.py sdist upload -r pypitest
   #check https://testpypi.python.org/pypi/
   python setup.py register -r pypi
   python setup.py sdist upload -r pypi
* raspberry pi kiosk notes
  Chromium installation worked from here https://www.raspberrypi.org/forums/viewtopic.php?t=121195
  sudo visudo # to change last line to have PASSWD
  Disable dev tools: .config/chromium/Default/Preferences
** autoboot chrome: sudo emacs .config/autostart/chromium.desktop
[Desktop Entry]
Type=Application
Exec=bash /home/pi/kiosk.sh
** startup script: emacs /home/pi/kiosk.sh
# give it time to connect to the internet
sleep 60

# these lines kill the screen saver
xset s off
xset -dpms
xset s noblank

# boot chrome, kiosk gets rid of browser ui, incognito removes "restore crashed tabs?" and other annoyances
chromium-browser --kiosk --incognito txrxlabs.org/checkin/?kiosk
* letsencrypt
** first time
cd /usr/local/sbin
sudo wget https://dl.eff.org/certbot-auto
sudo chmod a+x /usr/local/sbin/certbot-auto
** add to nginx.conf
location ~ /.well-known {
  allow all;
  alias /usr/share/nginx/html/;
}
* ssl certs
# back upe everything in /etc/nginx/ssl/2016/ where 2016 is the year the cert expires
openssl req -newkey rsa:2048 -nodes -keyout txrxlabs.org.key -out txrxlabs.org.csr
# Feed the above csr into namecheap, validate domain, get zip file
unzip txrxlabs_org.zip
# cat both these together and change location in nginx
cat txrxlabs_org.crt txrxlabs_org.ca-bundle > final.ca-bundle
* heroku (homer)
heroku login
heroku pg:backups capture --app radiant-anchorage-5004
curl -o latest.dump `heroku pg:backups public-url --app radiant-anchorage-5004`
dropdb homer
createdb homer
pg_restore --clean --no-acl --no-owner -h localhost -d homer latest.dump
pg_restore --clean --no-acl --no-owner -h localhost -d homer latest.dump #must be done twice to work
* Deploy
** to staging
commit/push
git checkout staging
git merge master
git push
fab deploy_staging
-- or --
git checkout staging; git merge master; git push; fab deploy_staging
** to live
git checkout master
fab deploy hup

* Create vbox
** Dependencies
  sudo apt-get install linux-headers-`uname -r` build-essential dkms
  sudo apt-get install python-software-properties
  sudo apt-get update
  sudo apt-get upgrade
  sudo apt-get install emacs24-nox git-core
  #shutdown, switch to vbox cd, create shared folder, bridged and host only networks
  sudo mkdir /media/cd
  sudo mount /dev/sr0 /media/cd/
  sudo bash /media/cd/VBoxLinuxAdditions.run 
  mkdir django-projects
  sudo mount.vboxsf django-projects django-projects/
** these lines should be added to /etc/network/interfaces
auto eth1
iface eth1 inet static
    netmask 255.255.255.0
    address 192.168.56.10
 - Source
   http://muffinresearch.co.uk/archives/2010/02/08/howto-ssh-into-virtualbox-3-linux-guests/
** javascript-mode
To install the JavaScript mode for Emacs, first obtain the Emacs lisp file at 

http://joost.zeekat.nl/wp-content/javascript.el

Then put that into a directory called "site-lisp" in your Emacs directories.
If you don't know where that is, use "locate site-lisp" to find it.
/usr/share/emacs/site-lisp

Finally, in your .emacs file in your home directory, add the following lines:

(add-to-list 'auto-mode-alist '("\\.js\\'" . javascript-mode))
(autoload 'javascript-mode "javascript" nil t)
(setq javascript-indent-level 2)

 - source
   http://ubuntuforums.org/showthread.php?t=439399
** more dependencies
sudo apt-get install libpq-dev python-dev
sudo apt-get install postgresql-8.4 postgis libgeos-3.1.0 libgeos-dev postgresql-8.4-postgis \
     libpq-dev
sudo apt-get install python-setuptools python-psycopg2 python-dateutil python-simplejson \
     python-django-tagging python-memcache memcached
sudo easy_install django==1.3 django-pagination south django-devserver sorl-thumbnail
* Postgres DB
edit /etc/postgresql/8.4/main/pg_hba.conf to allow postgres trust (instead of ident)
/etc/init.d/postgresql-8.4 restart
createdb <name> --username=postgres
psql -d template1 --username=postgres
ALTER USER postgres WITH PASSWORD 'postgres';
\q
createlang plpgsql <name> --username=postgres
psql -f /usr/share/postgresql/9.1/contrib/postgis-1.5/postgis.sql --username=postgres -d <name>
psql -f /usr/share/postgresql/9.1/contrib/postgis-1.5/spatial_ref_sys.sql --username=postgres -d <name>
* uwsgi on nginx
sudo apt-get install python-software-properties
sudo add-apt-repository ppa:nginx/stable
sudo apt-get update
sudo apt-get install nginx

* Deny hosts fix
Stop DenyHosts - sudo /etc/init.d/denyhosts stop
Remove the IP address from /etc/hosts.deny
Edit /var/lib/denyhosts/hosts and remove the lines containing the IP address. Save the file.
Edit /var/lib/denyhosts/hosts-restricted and remove the lines containing the IP address. Save the file.
Edit /var/lib/denyhosts/hosts-root and remove the lines containing the IP address. Save the file.
Edit /var/lib/denyhosts/hosts-valid and remove the lines containing the IP address. Save the file.
Edit /var/lib/denyhosts/user-hosts and remove the lines containing the IP address. Save the file.
(optional) Consider adding the IP address to /var/lib/denyhosts/allowed-hosts
Start DenyHosts- sudo /etc/init.d/denyhosts start
* Customizing the admin interface
** look at django.contrib.sites.index
*** app_list - list of apps
    name
    app_url
    has_model_perms - change,add both should be true
    models - list of dicts with name, admin_url (needs ?page=page_name), perms
*** root_path
* GAE
** application settings>add domain>
** enter top 2 lvls of domain
** add a cname record
* nginx
** install nginx and uwsgi
sudo apt-get install python-software-properties
sudo add-apt-repository ppa:nginx/stable
sudo apt-get update # you'll get an old version without nginx if not!
sudo apt-get install nginx
wget http://projects.unbit.it/downloads/uwsgi-0.9.9.2.tar.gz
tar zxf uwsgi-0.9.9.2.tar.gz 
cd uwsgi-0.9.9.2
sudo apt-get install python-dev libxml2-dev
sudo python setup.py install
** /etc/nginx/sites-enabled/default
upstream django {
        server 127.0.0.1:46536;
        #server 173.230.156.62:46536;
        #server 192.168.180.108:8000;
        #server 192.168.130.172:8000;
        #server 192.168.136.231:8000;
}

server {
        listen   80 default;
        server_name  chase.mouthwateringmedia.com;

        access_log  /var/log/nginx/localhost.access.log;

        location /static {
                root /home/webapp/django-projects/chase;
                expires 30d;
        }

        location / {
                uwsgi_pass  django;
                include     uwsgi_params;
        }
}

** django_wsgi.py
import os
import django.core.handlers.wsgi

os.environ['PYTHON_EGG_CACHE'] = '/tmp/egg_cache'
os.environ['DJANGO_SETTINGS_MODULE'] = 'chase.settings'
application = django.core.handlers.wsgi.WSGIHandler()
** uwsgi.xml
<uwsgi>
    <pythonpath>/home/webapp/django-projects/</pythonpath>
    <pythonpath>/home/webapp/django-projects/chase/</pythonpath>
    <app mountpoint="/">
        <script>django_wsgi</script>
    </app>
</uwsgi>
** put app on python path
** run the following as webapp in a screen
/usr/bin/uwsgi -s 127.0.0.1:46536 -z 180 -t 180 -M -p 8 -C -x \
    /home/webapp/django-projects/chase/uwsgi.xml
* multiple memcached instances
** Creating a second memcached instance
*** from
 - http://blog.nevalon.de/en/wie-kann-ich-mehrere-instanzen-von-memcached-auf-einem-server-laufen-lassenhow-can-i-run-multiple-instances-of-memcached-on-one-server-20090729
*** copy /etc/memcached.conf to memcached_main.conf and memcached_sessions.conf
*** change port of one .conf file
*** start/stop with /etc/init.d/memcached start/stop [main|sessions]
*** patch /usr/share/memcached/scripts/startmemcached

26,30d25
> if (scalar(@ARGV) == 2) {
> $etcfile = shift(@ARGV);
> $pidfile = shift(@ARGV);
> }
>

*** replace /etc/init.d/memcached

#! /bin/bash
### BEGIN INIT INFO
# Provides: memcached
# Required-Start: $syslog
# Required-Stop: $syslog
# Should-Start: $local_fs
# Should-Stop: $local_fs
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: memcached - Memory caching daemon
# Description: memcached - Memory caching daemon
### END INIT INFO


PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/bin/memcached
DAEMONNAME=memcached
DAEMONBOOTSTRAP=/usr/share/memcached/scripts/start-memcached
DESC=memcached

test -x $DAEMON || exit 0
test -x $DAEMONBOOTSTRAP || exit 0

set -e

FILES=(/etc/memcached_*.conf);
# check for alternative config schema
if [ -r "${FILES[0]}" ]; then
CONFIGS=();
  for FILE in "${FILES[@]}";
  do
    # remove prefix
    NAME=${FILE#/etc/};
    # remove suffix
    NAME=${NAME%.conf};

    # check optional second param
    if [ $# -ne 2 ];
    then
      # add to config array
      CONFIGS+=($NAME);
    elif [ "memcached_$2" == "$NAME" ];
    then
      # use only one memcached
      CONFIGS=($NAME);
      break;
    fi;
  done;

  if [ ${#CONFIGS[@]} == 0 ];
  then
echo "Config not exist for: $2" >&2;
    exit 1;
  fi;
else
CONFIGS=(memcached);
fi;

CONFIG_NUM=${#CONFIGS[@]};
for ((i=0; i < $CONFIG_NUM; i++)); do
NAME=${CONFIGS[${i}]};
  PIDFILE="/var/run/${NAME}.pid";

case "$1" in
  start)
echo -n "Starting $DESC: "
        start-stop-daemon --start --quiet --exec "$DAEMONBOOTSTRAP" -- /etc/${NAME}.conf $PIDFILE
echo "$NAME."
;;
  stop)
echo -n "Stopping $DESC: "
start-stop-daemon --stop --quiet --oknodo --pidfile $PIDFILE --exec $DAEMON
echo "$NAME."
rm -f $PIDFILE
;;

  restart|force-reload)
#
# If the "reload" option is implemented, move the "force-reload"
# option to the "reload" entry above. If not, "force-reload" is
# just the same as "restart".
#
echo -n "Restarting $DESC: "
start-stop-daemon --stop --quiet --oknodo --pidfile $PIDFILE
rm -f $PIDFILE
sleep 1
        start-stop-daemon --start --quiet --exec "$DAEMONBOOTSTRAP" -- /etc/${NAME}.conf $PIDFILE
echo "$NAME."
;;
  *)
N=/etc/init.d/$NAME
# echo "Usage: $N {start|stop|restart|reload|force-reload}" >&2
echo "Usage: $N {start|stop|restart|force-reload}" >&2
exit 1
;;
esac
done;

exit 0

** django configuration
*** django.contrib.sessions.backends.cache(.py) was copied to
tag.utils.session_cache(.py)
*** changed like
2c2,5
< from django.core.cache import cache
---
> from django.conf import settings
> from django.core.cache import get_cache
> 
> cache = get_cache(settings.SESSION_CACHE_BACKEND)

*** added the following to my machine_settings
SESSION_CACHE_BACKEND = 'memcached://127.0.0.1:11212/'
SESSION_ENGINE = "utils.session_cache"
** testing
*** make sure the following doesn't log you out
sudo /etc/init.d/memcached stop main
*** and the following SHOULD log you out
sudo /etc/init.d/memcached stop sessions
* freaking node and npm
** download linux binaries from nodejs.org/download
** sudo ln -s NODEDIR/bin/node /usr/bin
** sudo ln -s NODEDIR/lib/node_modules/npm/bin/npm-cli.js /usr/bin/npm
* add swap space
  sudo dd if=/dev/zero of=/swapfile bs=1024 count=512k
  sudo mkswap /swapfile
  sudo swapon /swapfile
  sudo emacs /etc/fstab
  # add this line
  # /swapfile       none    swap    sw      0       0 
  echo 10 | sudo tee /proc/sys/vm/swappiness
  echo vm.swappiness = 10 | sudo tee -a /etc/sysctl.conf
  sudo chown root:root /swapfile 
  sudo chmod 0600 /swapfile
