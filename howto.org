* Deploy
** to staging
commit/push
git checkout staging
git merge master
git push
fab deploy_staging
-- or --
git checkout staging; git merge master; git push; fab deploy_staging
** to live
git checkout master
fab deploy hup

* Create vbox
** Dependencies
  sudo apt-get install linux-headers-`uname -r` build-essential dkms
  sudo apt-get install python-software-properties
  sudo apt-get update
  sudo apt-get upgrade
  sudo apt-get install emacs24-nox git-core
  #shutdown, switch to vbox cd, create shared folder, bridged and host only networks
  sudo mkdir /media/cd
  sudo mount /dev/sr0 /media/cd/
  sudo bash /media/cd/VBoxLinuxAdditions.run 
  mkdir django-projects
  sudo mount.vboxsf django-projects django-projects/
** these lines should be added to /etc/network/interfaces
auto eth1
iface eth1 inet static
    netmask 255.255.255.0
    address 192.168.56.10
 - Source
   http://muffinresearch.co.uk/archives/2010/02/08/howto-ssh-into-virtualbox-3-linux-guests/
** javascript-mode
To install the JavaScript mode for Emacs, first obtain the Emacs lisp file at 

http://joost.zeekat.nl/wp-content/javascript.el

Then put that into a directory called "site-lisp" in your Emacs directories.
If you don't know where that is, use "locate site-lisp" to find it.
/usr/share/emacs/site-lisp

Finally, in your .emacs file in your home directory, add the following lines:

(add-to-list 'auto-mode-alist '("\\.js\\'" . javascript-mode))
(autoload 'javascript-mode "javascript" nil t)
(setq javascript-indent-level 2)

 - source
   http://ubuntuforums.org/showthread.php?t=439399
** more dependencies
sudo apt-get install postgresql-8.4 postgis libgeos-3.1.0 libgeos-dev postgresql-8.4-postgis \
     libpq-dev
sudo apt-get install python-setuptools python-psycopg2 python-dateutil python-simplejson \
     python-imaging python-django-tagging python-memcache memcached
sudo easy_install django==1.3 django-pagination south django-devserver sorl-thumbnail
* Postgres DB
edit /etc/postgresql/8.4/main/pg_hba.conf to allow postgres trust (instead of ident)
/etc/init.d/postgresql-8.4 restart
createdb <name> --username=postgres
psql -d template1 --username=postgres
ALTER USER postgres WITH PASSWORD 'postgres';
\q
createlang plpgsql <name> --username=postgres
* uwsgi on nginx
sudo apt-get install python-software-properties
sudo add-apt-repository ppa:nginx/stable
sudo apt-get update
sudo apt-get install nginx

* Add to gitosis
  clone gitosis from git.mwm.com
  add app to read and write groups in gitosis.conf
  commit/push
  ad app
  git init
  git remote add origin git@git.mouthwateringmedia.com:asa.git
  add .gitignore
  git add/commit 
  git push origin master:refs/heads/master # error if no add/commit
  copy ssh key to new machine and clone the app
* Deny hosts fix
Stop DenyHosts - sudo /etc/init.d/denyhosts stop
Remove the IP address from /etc/hosts.deny
Edit /var/lib/denyhosts/hosts and remove the lines containing the IP address. Save the file.
Edit /var/lib/denyhosts/hosts-restricted and remove the lines containing the IP address. Save the file.
Edit /var/lib/denyhosts/hosts-root and remove the lines containing the IP address. Save the file.
Edit /var/lib/denyhosts/hosts-valid and remove the lines containing the IP address. Save the file.
Edit /var/lib/denyhosts/user-hosts and remove the lines containing the IP address. Save the file.
(optional) Consider adding the IP address to /var/lib/denyhosts/allowed-hosts
Start DenyHosts- sudo /etc/init.d/denyhosts start
* Customizing the admin interface
** look at django.contrib.sites.index
*** app_list - list of apps
    name
    app_url
    has_model_perms - change,add both should be true
    models - list of dicts with name, admin_url (needs ?page=page_name), perms
*** root_path
* Non-gitosis git
make project, git init
$ git clone --bare /home/chriscauley/txrx/ txrx.git
cd txrx.git/hooks/
cp post-update.sample  post-update
chmod a+x post-update
* GAE
** application settings>add domain>
** enter top 2 lvls of domain
** add a cname record
* nginx
** install nginx and uwsgi
sudo apt-get install python-software-properties
sudo add-apt-repository ppa:nginx/stable
sudo apt-get update # you'll get an old version without nginx if not!
sudo apt-get install nginx
wget http://projects.unbit.it/downloads/uwsgi-0.9.9.2.tar.gz
tar zxf uwsgi-0.9.9.2.tar.gz 
cd uwsgi-0.9.9.2
sudo apt-get install python-dev libxml2-dev
sudo python setup.py install
** /etc/nginx/sites-enabled/default
upstream django {
        server 127.0.0.1:46536;
        #server 173.230.156.62:46536;
        #server 192.168.180.108:8000;
        #server 192.168.130.172:8000;
        #server 192.168.136.231:8000;
}

server {
        listen   80 default;
        server_name  chase.mouthwateringmedia.com;

        access_log  /var/log/nginx/localhost.access.log;

        location /static {
                root /home/webapp/django-projects/chase;
                expires 30d;
        }

        location / {
                uwsgi_pass  django;
                include     uwsgi_params;
        }
}

** django_wsgi.py
import os
import django.core.handlers.wsgi

os.environ['PYTHON_EGG_CACHE'] = '/tmp/egg_cache'
os.environ['DJANGO_SETTINGS_MODULE'] = 'chase.settings'
application = django.core.handlers.wsgi.WSGIHandler()
** uwsgi.xml
<uwsgi>
    <pythonpath>/home/webapp/django-projects/</pythonpath>
    <pythonpath>/home/webapp/django-projects/chase/</pythonpath>
    <app mountpoint="/">
        <script>django_wsgi</script>
    </app>
</uwsgi>
** put app on python path
** run the following as webapp in a screen
/usr/bin/uwsgi -s 127.0.0.1:46536 -z 180 -t 180 -M -p 8 -C -x \
    /home/webapp/django-projects/chase/uwsgi.xml
